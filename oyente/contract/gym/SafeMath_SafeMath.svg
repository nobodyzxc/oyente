<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: %3 Pages: 1 -->
<svg width="446pt" height="4082pt"
 viewBox="0.00 0.00 446.00 4082.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 4078)">
<title>%3</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-4078 442,-4078 442,4 -4,4"/>
<!-- 0 -->
<g id="node1" class="node">
<title>0</title>
<polygon fill="#f4f141" stroke="#000000" points="438,-4074 0,-4074 0,0 438,0 438,-4074"/>
<text text-anchor="middle" x="219" y="-4058.8" font-family="Times,serif" font-size="14.00" fill="#000000">terminal</text>
<text text-anchor="middle" x="219" y="-4043.8" font-family="Times,serif" font-size="14.00" fill="#000000">addrs : (0, 32)</text>
<text text-anchor="middle" x="219" y="-4012.8" font-family="Times,serif" font-size="14.00" fill="#000000">PUSH20 0x0000000000000000000000000000000000000000 </text>
<text text-anchor="middle" x="219" y="-3997.8" font-family="Times,serif" font-size="14.00" fill="#000000">ADDRESS </text>
<text text-anchor="middle" x="219" y="-3982.8" font-family="Times,serif" font-size="14.00" fill="#000000">EQ </text>
<text text-anchor="middle" x="219" y="-3967.8" font-family="Times,serif" font-size="14.00" fill="#000000">PUSH1 0x80 </text>
<text text-anchor="middle" x="219" y="-3952.8" font-family="Times,serif" font-size="14.00" fill="#000000">PUSH1 0x40 </text>
<text text-anchor="middle" x="219" y="-3937.8" font-family="Times,serif" font-size="14.00" fill="#000000">MSTORE </text>
<text text-anchor="middle" x="219" y="-3922.8" font-family="Times,serif" font-size="14.00" fill="#000000">PUSH1 0x00 </text>
<text text-anchor="middle" x="219" y="-3907.8" font-family="Times,serif" font-size="14.00" fill="#000000">DUP1 </text>
<text text-anchor="middle" x="219" y="-3892.8" font-family="Times,serif" font-size="14.00" fill="#000000">REVERT </text>
<text text-anchor="middle" x="219" y="-3877.8" font-family="Times,serif" font-size="14.00" fill="#000000">STOP </text>
<text text-anchor="middle" x="219" y="-3846.8" font-family="Times,serif" font-size="14.00" fill="#000000">stack sum: 1</text>
<text text-anchor="middle" x="219" y="-3831.8" font-family="Times,serif" font-size="14.00" fill="#000000">block gas : {26}</text>
<text text-anchor="middle" x="219" y="-3816.8" font-family="Times,serif" font-size="14.00" fill="#000000">accumulated gas : {(0,): 26}</text>
<text text-anchor="middle" x="219" y="-3769.8" font-family="Times,serif" font-size="14.00" fill="#000000">========================================</text>
<text text-anchor="middle" x="219" y="-3754.8" font-family="Times,serif" font-size="14.00" fill="#000000">path_constraints1:</text>
<text text-anchor="middle" x="219" y="-3739.8" font-family="Times,serif" font-size="14.00" fill="#000000">0 &lt;= Iv,</text>
<text text-anchor="middle" x="219" y="-3724.8" font-family="Times,serif" font-size="14.00" fill="#000000">init_Is &gt;= Iv,</text>
<text text-anchor="middle" x="219" y="-3709.8" font-family="Times,serif" font-size="14.00" fill="#000000">0 &lt;= init_Ia</text>
<text text-anchor="middle" x="219" y="-3694.8" font-family="Times,serif" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="219" y="-3679.8" font-family="Times,serif" font-size="14.00" fill="#000000">[&quot;library SafeMath {</text>
<text text-anchor="middle" x="219" y="-3664.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function mul(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-3649.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if (a == 0) {</text>
<text text-anchor="middle" x="219" y="-3634.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 0;</text>
<text text-anchor="middle" x="219" y="-3619.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="219" y="-3604.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a * b;</text>
<text text-anchor="middle" x="219" y="-3589.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c / a == b);</text>
<text text-anchor="middle" x="219" y="-3574.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-3559.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-3528.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function div(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-3513.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(b &gt; 0); // Solidity automatically throws when dividing by 0</text>
<text text-anchor="middle" x="219" y="-3498.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a / b;</text>
<text text-anchor="middle" x="219" y="-3483.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold</text>
<text text-anchor="middle" x="219" y="-3468.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-3453.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-3422.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function sub(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-3407.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(b &lt;= a);</text>
<text text-anchor="middle" x="219" y="-3392.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return a &#45; b;</text>
<text text-anchor="middle" x="219" y="-3377.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-3346.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function add(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-3331.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a + b;</text>
<text text-anchor="middle" x="219" y="-3316.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c &gt;= a);</text>
<text text-anchor="middle" x="219" y="-3301.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-3286.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-3271.8" font-family="Times,serif" font-size="14.00" fill="#000000">}&quot;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &quot;library SafeMath {</text>
<text text-anchor="middle" x="219" y="-3256.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function mul(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-3241.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if (a == 0) {</text>
<text text-anchor="middle" x="219" y="-3226.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 0;</text>
<text text-anchor="middle" x="219" y="-3211.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="219" y="-3196.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a * b;</text>
<text text-anchor="middle" x="219" y="-3181.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c / a == b);</text>
<text text-anchor="middle" x="219" y="-3166.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-3151.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-3120.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function div(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-3105.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(b &gt; 0); // Solidity automatically throws when dividing by 0</text>
<text text-anchor="middle" x="219" y="-3090.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a / b;</text>
<text text-anchor="middle" x="219" y="-3075.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold</text>
<text text-anchor="middle" x="219" y="-3060.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-3045.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-3014.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function sub(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-2999.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(b &lt;= a);</text>
<text text-anchor="middle" x="219" y="-2984.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return a &#45; b;</text>
<text text-anchor="middle" x="219" y="-2969.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-2938.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function add(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-2923.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a + b;</text>
<text text-anchor="middle" x="219" y="-2908.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c &gt;= a);</text>
<text text-anchor="middle" x="219" y="-2893.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-2878.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-2863.8" font-family="Times,serif" font-size="14.00" fill="#000000">}&quot;, &quot;library SafeMath {</text>
<text text-anchor="middle" x="219" y="-2848.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function mul(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-2833.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if (a == 0) {</text>
<text text-anchor="middle" x="219" y="-2818.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 0;</text>
<text text-anchor="middle" x="219" y="-2803.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="219" y="-2788.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a * b;</text>
<text text-anchor="middle" x="219" y="-2773.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c / a == b);</text>
<text text-anchor="middle" x="219" y="-2758.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-2743.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-2712.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function div(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-2697.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(b &gt; 0); // Solidity automatically throws when dividing by 0</text>
<text text-anchor="middle" x="219" y="-2682.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a / b;</text>
<text text-anchor="middle" x="219" y="-2667.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold</text>
<text text-anchor="middle" x="219" y="-2652.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-2637.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-2606.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function sub(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-2591.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(b &lt;= a);</text>
<text text-anchor="middle" x="219" y="-2576.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return a &#45; b;</text>
<text text-anchor="middle" x="219" y="-2561.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-2530.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function add(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-2515.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a + b;</text>
<text text-anchor="middle" x="219" y="-2500.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c &gt;= a);</text>
<text text-anchor="middle" x="219" y="-2485.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-2470.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-2455.8" font-family="Times,serif" font-size="14.00" fill="#000000">}&quot;, &quot;library SafeMath {</text>
<text text-anchor="middle" x="219" y="-2440.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function mul(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-2425.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if (a == 0) {</text>
<text text-anchor="middle" x="219" y="-2410.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 0;</text>
<text text-anchor="middle" x="219" y="-2395.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="219" y="-2380.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a * b;</text>
<text text-anchor="middle" x="219" y="-2365.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c / a == b);</text>
<text text-anchor="middle" x="219" y="-2350.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-2335.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-2304.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function div(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-2289.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(b &gt; 0); // Solidity automatically throws when dividing by 0</text>
<text text-anchor="middle" x="219" y="-2274.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a / b;</text>
<text text-anchor="middle" x="219" y="-2259.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold</text>
<text text-anchor="middle" x="219" y="-2244.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-2229.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-2198.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function sub(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-2183.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(b &lt;= a);</text>
<text text-anchor="middle" x="219" y="-2168.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return a &#45; b;</text>
<text text-anchor="middle" x="219" y="-2153.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-2122.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function add(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-2107.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a + b;</text>
<text text-anchor="middle" x="219" y="-2092.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c &gt;= a);</text>
<text text-anchor="middle" x="219" y="-2077.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-2062.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-2047.8" font-family="Times,serif" font-size="14.00" fill="#000000">}&quot;, &#39;&#39;, &quot;library SafeMath {</text>
<text text-anchor="middle" x="219" y="-2032.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function mul(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-2017.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if (a == 0) {</text>
<text text-anchor="middle" x="219" y="-2002.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 0;</text>
<text text-anchor="middle" x="219" y="-1987.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="219" y="-1972.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a * b;</text>
<text text-anchor="middle" x="219" y="-1957.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c / a == b);</text>
<text text-anchor="middle" x="219" y="-1942.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-1927.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-1896.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function div(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-1881.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(b &gt; 0); // Solidity automatically throws when dividing by 0</text>
<text text-anchor="middle" x="219" y="-1866.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a / b;</text>
<text text-anchor="middle" x="219" y="-1851.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold</text>
<text text-anchor="middle" x="219" y="-1836.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-1821.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-1790.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function sub(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-1775.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(b &lt;= a);</text>
<text text-anchor="middle" x="219" y="-1760.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return a &#45; b;</text>
<text text-anchor="middle" x="219" y="-1745.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-1714.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function add(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-1699.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a + b;</text>
<text text-anchor="middle" x="219" y="-1684.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c &gt;= a);</text>
<text text-anchor="middle" x="219" y="-1669.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-1654.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-1639.8" font-family="Times,serif" font-size="14.00" fill="#000000">}&quot;, &#39;&#39;, &quot;library SafeMath {</text>
<text text-anchor="middle" x="219" y="-1624.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function mul(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-1609.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if (a == 0) {</text>
<text text-anchor="middle" x="219" y="-1594.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 0;</text>
<text text-anchor="middle" x="219" y="-1579.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="219" y="-1564.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a * b;</text>
<text text-anchor="middle" x="219" y="-1549.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c / a == b);</text>
<text text-anchor="middle" x="219" y="-1534.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-1519.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-1488.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function div(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-1473.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(b &gt; 0); // Solidity automatically throws when dividing by 0</text>
<text text-anchor="middle" x="219" y="-1458.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a / b;</text>
<text text-anchor="middle" x="219" y="-1443.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold</text>
<text text-anchor="middle" x="219" y="-1428.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-1413.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-1382.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function sub(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-1367.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(b &lt;= a);</text>
<text text-anchor="middle" x="219" y="-1352.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return a &#45; b;</text>
<text text-anchor="middle" x="219" y="-1337.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-1306.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function add(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-1291.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a + b;</text>
<text text-anchor="middle" x="219" y="-1276.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c &gt;= a);</text>
<text text-anchor="middle" x="219" y="-1261.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-1246.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-1231.8" font-family="Times,serif" font-size="14.00" fill="#000000">}&quot;, &quot;library SafeMath {</text>
<text text-anchor="middle" x="219" y="-1216.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function mul(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-1201.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if (a == 0) {</text>
<text text-anchor="middle" x="219" y="-1186.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 0;</text>
<text text-anchor="middle" x="219" y="-1171.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="219" y="-1156.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a * b;</text>
<text text-anchor="middle" x="219" y="-1141.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c / a == b);</text>
<text text-anchor="middle" x="219" y="-1126.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-1111.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-1080.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function div(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-1065.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(b &gt; 0); // Solidity automatically throws when dividing by 0</text>
<text text-anchor="middle" x="219" y="-1050.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a / b;</text>
<text text-anchor="middle" x="219" y="-1035.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold</text>
<text text-anchor="middle" x="219" y="-1020.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-1005.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-974.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function sub(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-959.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(b &lt;= a);</text>
<text text-anchor="middle" x="219" y="-944.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return a &#45; b;</text>
<text text-anchor="middle" x="219" y="-929.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-898.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function add(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-883.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a + b;</text>
<text text-anchor="middle" x="219" y="-868.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c &gt;= a);</text>
<text text-anchor="middle" x="219" y="-853.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-838.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-823.8" font-family="Times,serif" font-size="14.00" fill="#000000">}&quot;, &#39;&#39;, &quot;library SafeMath {</text>
<text text-anchor="middle" x="219" y="-808.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function mul(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-793.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if (a == 0) {</text>
<text text-anchor="middle" x="219" y="-778.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 0;</text>
<text text-anchor="middle" x="219" y="-763.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="219" y="-748.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a * b;</text>
<text text-anchor="middle" x="219" y="-733.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c / a == b);</text>
<text text-anchor="middle" x="219" y="-718.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-703.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-672.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function div(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-657.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(b &gt; 0); // Solidity automatically throws when dividing by 0</text>
<text text-anchor="middle" x="219" y="-642.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a / b;</text>
<text text-anchor="middle" x="219" y="-627.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold</text>
<text text-anchor="middle" x="219" y="-612.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-597.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-566.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function sub(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-551.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(b &lt;= a);</text>
<text text-anchor="middle" x="219" y="-536.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return a &#45; b;</text>
<text text-anchor="middle" x="219" y="-521.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-490.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function add(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-475.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a + b;</text>
<text text-anchor="middle" x="219" y="-460.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c &gt;= a);</text>
<text text-anchor="middle" x="219" y="-445.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-430.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-415.8" font-family="Times,serif" font-size="14.00" fill="#000000">}&quot;, &quot;library SafeMath {</text>
<text text-anchor="middle" x="219" y="-400.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function mul(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-385.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if (a == 0) {</text>
<text text-anchor="middle" x="219" y="-370.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return 0;</text>
<text text-anchor="middle" x="219" y="-355.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="219" y="-340.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a * b;</text>
<text text-anchor="middle" x="219" y="-325.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c / a == b);</text>
<text text-anchor="middle" x="219" y="-310.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-295.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-264.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function div(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-249.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(b &gt; 0); // Solidity automatically throws when dividing by 0</text>
<text text-anchor="middle" x="219" y="-234.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a / b;</text>
<text text-anchor="middle" x="219" y="-219.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold</text>
<text text-anchor="middle" x="219" y="-204.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-189.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-158.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function sub(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-143.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(b &lt;= a);</text>
<text text-anchor="middle" x="219" y="-128.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return a &#45; b;</text>
<text text-anchor="middle" x="219" y="-113.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-82.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;function add(uint256 a, uint256 b) internal pure returns (uint256) {</text>
<text text-anchor="middle" x="219" y="-67.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;uint256 c = a + b;</text>
<text text-anchor="middle" x="219" y="-52.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert(c &gt;= a);</text>
<text text-anchor="middle" x="219" y="-37.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return c;</text>
<text text-anchor="middle" x="219" y="-22.8" font-family="Times,serif" font-size="14.00" fill="#000000"> &#160;}</text>
<text text-anchor="middle" x="219" y="-7.8" font-family="Times,serif" font-size="14.00" fill="#000000">}&quot;, &#39;&#39;]</text>
</g>
</g>
</svg>
